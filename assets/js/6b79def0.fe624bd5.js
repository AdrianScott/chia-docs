"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[9553],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=p(n),h=i,f=m["".concat(c,".").concat(h)]||m[h]||u[h]||o;return n?r.createElement(f,a(a({ref:t},s),{},{components:n})):r.createElement(f,a({ref:t},s))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9593:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return m}});var r=n(7462),i=n(3366),o=(n(7294),n(3905)),a=["components"],l={sidebar_position:1},c="14.1 chia-blockchain",p={unversionedId:"14python-implementation/python-implementation",id:"14python-implementation/python-implementation",isDocsHomePage:!1,title:"14.1 chia-blockchain",description:"chia-blockchain is the first and official implementation of the Chia protocol. It is written",source:"@site/docs/14python-implementation/python-implementation.md",sourceDirName:"14python-implementation",slug:"/14python-implementation/python-implementation",permalink:"/docs/14python-implementation/python-implementation",editUrl:"https://github.com/Chia-Network/chia-docs/docs/14python-implementation/python-implementation.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Title",permalink:"/docs/13cli/cli"},next:{title:"15.1 References",permalink:"/docs/15resources/references"}},s=[],u={toc:s};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"141-chia-blockchain"},"14.1 chia-blockchain"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"chia-blockchain")," is the first and official implementation of the Chia protocol. It is written\nin python, with a few dependencies written in C++ or rust in order to improve performance. It\nis written from the ground up by the Chia team as well as open source contributors, and is not\na fork of any other blockchain system."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/Chia-Network/chia-blockchain"},"https://github.com/Chia-Network/chia-blockchain")),(0,o.kt)("p",null,"The codebase is split into several subfolders which categorize code on the different components\nof the system. Inside the source root (chia folder)."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"cmds"),": Contains the command line interface program, wihch is a python wrapper around the chia RPC api. When a command is run, a connection is established directly to the Chia services running locally."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"consensus"),": Consensus critical code that is high risk to change."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"daemon"),": Server that runs the daemon, launching and stopping the other services."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"farmer"),": Farmer server which handles signing blocks, coordinating the harvesters and communicating with a node. "),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"full_node"),": A large portion of the business logic of Chia is here, storing blocks and coins, full node protocol, etc."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"harvester"),": "),(0,o.kt)("li",{parentName:"ul"},"introducer"),(0,o.kt)("li",{parentName:"ul"},"plotters"),(0,o.kt)("li",{parentName:"ul"},"plotting"),(0,o.kt)("li",{parentName:"ul"},"pools"),(0,o.kt)("li",{parentName:"ul"},"protocols"),(0,o.kt)("li",{parentName:"ul"},"rpc"),(0,o.kt)("li",{parentName:"ul"},"server"),(0,o.kt)("li",{parentName:"ul"},"simulator"),(0,o.kt)("li",{parentName:"ul"},"ssl"),(0,o.kt)("li",{parentName:"ul"},"timelord"),(0,o.kt)("li",{parentName:"ul"},"types"),(0,o.kt)("li",{parentName:"ul"},"util"),(0,o.kt)("li",{parentName:"ul"},"wallet")))}m.isMDXComponent=!0}}]);