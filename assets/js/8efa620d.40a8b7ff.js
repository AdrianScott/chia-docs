"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[885],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(t),h=r,g=d["".concat(s,".").concat(h)]||d[h]||p[h]||i;return t?a.createElement(g,l(l({ref:n},u),{},{components:t})):a.createElement(g,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6246:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={title:"OpenBSD Install",slug:"/openbsd-install"},l="Install Chia on OpenBSD",o={unversionedId:"reference-client/openbsd-install",id:"reference-client/openbsd-install",title:"OpenBSD Install",description:"Tested with Chia 1.1.4 on OpenBSD/amd64 6.8",source:"@site/docs/reference-client/openbsd-install.mdx",sourceDirName:"reference-client",slug:"/openbsd-install",permalink:"/openbsd-install",draft:!1,editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/reference-client/openbsd-install.mdx",tags:[],version:"current",frontMatter:{title:"OpenBSD Install",slug:"/openbsd-install"},sidebar:"tutorialSidebar",previous:{title:"FreeBSD Install",permalink:"/freebsd-install"},next:{title:"Logging Reference",permalink:"/logging-reference"}},s={},c=[{value:"Prerequisite package installation",id:"prerequisite-package-installation",level:2},{value:"Build",id:"build",level:2},{value:"Launch GUI",id:"launch-gui",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"install-chia-on-openbsd"},"Install Chia on OpenBSD"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Tested with Chia 1.1.4 on OpenBSD/amd64 6.8")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},'# install required packages\ndoas pkg_add git python-3.8.6 rust cmake gmake gmpxx\n\n# create a new user with the login class "daemon" so that it can use all\n# available memory for plotting, then switch to that user\ndoas useradd -m -Ldaemon chia\ndoas -u chia ksh -l\ncd\n\n# clone repos\ngit clone https://github.com/Chia-Network/chia-blockchain.git --branch latest\ngit clone https://github.com/Chia-Network/clvm_rs.git --branch 0.1.7\ngit clone https://github.com/PyO3/maturin.git --branch v0.10.3\ngit clone https://github.com/timkuijsten/chiavdf.git --branch openbsd # chiavdf/pull/71\n\nexport BUILD_VDF_CLIENT=N\n\n# create python virtual environment for Chia\ncd chia-blockchain/\npython3 -m venv venv\n. ./venv/bin/activate\npip install --upgrade pip\n\ncd ../chiavdf/\npip install .\n\ncd ../maturin/\n# don\'t pass static compiler flags to the rust linker because that would cause\n# a core dump, possibly because of resource limits\nsed -i \'s|cargo_args.extend(\\["--", "-C", "link-arg=-s"\\])|#cargo_args.extend(\\["--", "-C", "link-arg=-s"\\])|\' setup.py\npip install .\n\ncd ../clvm_rs/\nmaturin develop --release\n\n# XXX should be a more elegant way...\ncp target/release/libclvm_rs.so ../chia-blockchain/clvm_rs.so\n\ncd ../chia-blockchain/\n# use our previous compile results\nsed -i \'s|"chiavdf==1.0.1"|"chiavdf==1.0.2.dev1"|\' setup.py\n\n# use a hardcoded random secret so the software can run headless and without\n# user intervention\nsed -i \'s|elif platform == "linux":|elif platform == "linux" or platform.startswith("openbsd"):|\' chia/util/keychain.py\n_keyring=$(dd status=none if=/dev/random bs=8 count=1 | od -H | tr -d \' \' | head -1 | cut -b8-25)\nsed -i \'s|keyring.keyring_key = "your keyring password"|keyring.keyring_key = "\'"$_keyring"\'"|\' chia/util/keychain.py\nunset _keyring\n\nsh install.sh\n\n# DONE, Chia is installed now, start using it by creating a config and keys\n\nchia init\nchia keys generate\n\n# if you are going to setup port forwarding, disable upnp\nchia configure --enable-upnp false\n\nchia start node wallet farmer harvester\n')),(0,r.kt)("p",null,"More details can be found in the ",(0,r.kt)("a",{parentName:"p",href:"/quick-start-guide"},"Chia Quick Start Guide"),"."),(0,r.kt)("h1",{id:"gui-build--usage"},"GUI Build / Usage"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"WARNING: the following has only been tested with Chia 1.0beta7 on OpenBSD/amd64 6.7")),(0,r.kt)("p",null,"The build instructions in the previous sections above must be completed successfully before attempting to build the GUI using the procedure below."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"WARNING: Although the following steps have been used successfully, the resulting GUI will be run with an older version of electron than is recommended by the Chia Network team. This may result in unexpected problems.")),(0,r.kt)("h2",{id:"prerequisite-package-installation"},"Prerequisite package installation"),(0,r.kt)("p",null,"As root (or using doas / sudo), first install some additional OpenBSD packages required for GUI usage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pkg_add -i electron\n")),(0,r.kt)("h2",{id:"build"},"Build"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd chia-blockchain\n. ./activate\n\ncd chia-blockchain-gui\n\n# build / set up GUI\nnpm run build\n\n# Remove failed electron 8.2.5 install and fall back to the OpenBSD\n# ports tree 8.2.0 electron, which currently (as of 6/10/2020) works.\n#\n# This may not continue to work in the future.  A full solution to\n# this requires official OpenBSD electron builds, provided by the\n# electron project itself.\n\nrm -rf node_modules/electron\n")),(0,r.kt)("h2",{id:"launch-gui"},"Launch GUI"),(0,r.kt)("p",null,"The GUI can now be launched using the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd chia-blockchain\n. ./activate\n\ncd chia-blockchain-gui\nnpm run electron\n")))}p.isMDXComponent=!0}}]);