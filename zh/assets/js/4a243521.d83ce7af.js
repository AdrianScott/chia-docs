"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[4495],{3905:function(e,t,o){o.d(t,{Zo:function(){return h},kt:function(){return d}});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},h=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,h=s(e,["components","mdxType","originalType","parentName"]),p=c(o),d=n,y=p["".concat(l,".").concat(d)]||p[d]||u[d]||a;return o?r.createElement(y,i(i({ref:t},h),{},{components:o})):r.createElement(y,i({ref:t},h))}));function d(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=o[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}p.displayName="MDXCreateElement"},5960:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return h},default:function(){return p}});var r=o(7462),n=o(3366),a=(o(7294),o(3905)),i=["components"],s={sidebar_position:3},l="9.3 Plot Public Keys",c={unversionedId:"09keys/plot_public_keys",id:"09keys/plot_public_keys",isDocsHomePage:!1,title:"9.3 Plot Public Keys",description:"So, what is the plot public key shown in the previous section? The plot public key can technically be any BLS public key. As long as the correct signatures are included in the block, full nodes will allow it. So, what is the plot public key shown in the previous section? The plot public key can technically be any BLS public key. As long as the correct signatures are included in the block, full nodes will allow it. However, BLS allows us to combine many public keys into one, which allows native N-of-N signatures without full nodes noticing that a multi-signature is used. In the current versions of chia-blockchain, we use this to our advantage to increase security. Please note that these schemes are not consensus critical, and therefore some farmers might use different strategies for generating their public keys. In the current versions of chia-blockchain, we use this to our advantage to increase security. Please note that these schemes are not consensus critical, and therefore some farmers might use different strategies for generating their public keys.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/09keys/plot_public_keys.md",sourceDirName:"09keys",slug:"/09keys/plot_public_keys",permalink:"/zh/docs/09keys/plot_public_keys",editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/09keys/plot_public_keys.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"9.2 Plot IDs",permalink:"/zh/docs/09keys/plot_ids"},next:{title:"9.4 Architecture",permalink:"/zh/docs/09keys/architecture"}},h=[{value:"OG Plots",id:"og-plots",children:[]},{value:"Pooled Plots",id:"pooled-plots",children:[]},{value:"Plot format",id:"plot-format",children:[]}],u={toc:h};function p(e){var t=e.components,o=(0,n.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"93-plot-public-keys"},"9.3 Plot Public Keys"),(0,a.kt)("p",null,"So, what is the plot public key shown in the previous section? The plot public key can technically be any BLS public key. As long as the correct signatures are included in the block, full nodes will allow it. So, what is the plot public key shown in the previous section? The plot public key can technically be any BLS public key. As long as the correct signatures are included in the block, full nodes will allow it. However, BLS allows us to combine many public keys into one, which allows native N-of-N signatures without full nodes noticing that a multi-signature is used. In the current versions of ",(0,a.kt)("inlineCode",{parentName:"p"},"chia-blockchain"),", we use this to our advantage to increase security. Please note that these schemes are not consensus critical, and therefore some farmers might use different strategies for generating their public keys. In the current versions of ",(0,a.kt)("inlineCode",{parentName:"p"},"chia-blockchain"),", we use this to our advantage to increase security. Please note that these schemes are not consensus critical, and therefore some farmers might use different strategies for generating their public keys."),(0,a.kt)("p",null,"The plot public key is usually generated in one of two ways, the first for OG Plots, and the second for pooled plots."),(0,a.kt)("h2",{id:"og-plots"},"OG Plots"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The plot public key is a 2/2 BLS aggregate public key, which is generated by combining the farmer public key with the local public key."),(0,a.kt)("li",{parentName:"ul"},"The local public key is a random key that is created for each plot, and put into the plot. The local public key is a random key that is created for each plot, and put into the plot. They are not children of any BLS keys, and therefore are totally independent between plots."),(0,a.kt)("li",{parentName:"ul"},"The farmer key is a key that the farmer machine stores.")),(0,a.kt)("h2",{id:"pooled-plots"},"Pooled Plots"),(0,a.kt)("p",null,'For plots which are generated for use with the Plot NFT pooling protocol, an additional "taproot" secret key is used, making the aggregate key a 3-of-3. This 3rd key can be derived from public information of the other 2 keys, and it ensures that an attacker cannot create two new keys k1 and k2 such that they both add up to the original aggregate key. This 3rd key can be derived from public information of the other 2 keys, and it ensures that an attacker cannot create two new keys k1 and k2 such that they both add up to the original aggregate key.'),(0,a.kt)("p",null,"The taproot private key is defined as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"taproot_sk = BLSKeyGen(sha256(bytes(local_pk + farmer_pk) + bytes(local_pk) + bytes(farmer_pk)))\n")),(0,a.kt)("p",null,"Each block requires a signature from the plot key. This means that we need to combine two (or three) signatures: This means that we need to combine two (or three) signatures:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"from the local secret key (generated by the harvester)"),(0,a.kt)("li",{parentName:"ol"},"from the farmer secret key (generated by the farmer)"),(0,a.kt)("li",{parentName:"ol"},"(optional) from the taproot key (generated by the farmer)")),(0,a.kt)("p",null,"The farmer combines all the signatures to generate the plot signature, which will look like a normal 1-of-1 BLS signature to the rest of the network."),(0,a.kt)("p",null,"Note that signatures from both the local secret key and the farmer secret key are required for the block to be valid. A pool operator cannot derive the farmer secret key if they gain access to the local secret key. A pool operator cannot derive the farmer secret key if they gain access to the local secret key."),(0,a.kt)("h2",{id:"plot-format"},"Plot format"),(0,a.kt)("p",null,'The plot format depends on whether "farm to public key" or "farm to contract address" is being used. If farming to a contract address, the puzzle hash (address) is directly encoded into the plot. Otherwise, the pool public key is directly encoded into the plot. If farming to a contract address, the puzzle hash (address) is directly encoded into the plot. Otherwise, the pool public key is directly encoded into the plot.'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note that this is not the exact plot format, there are a few more details that are left out here.")),(0,a.kt)("p",null,"The important thing is that the harvester is only storing their local key in the plot, but no other keys are required from the harvester. This key alone is not enough to do anything, since it must be combined with the farmer's key. Therefore, compromising the harvester does not allow an attacker to redirect rewards. This key alone is not enough to do anything, since it must be combined with the farmer's key. Therefore, compromising the harvester does not allow an attacker to redirect rewards."),(0,a.kt)("figure",null,(0,a.kt)("img",{src:"/img/keys/plot_format.png",alt:"drawing"})))}p.isMDXComponent=!0}}]);