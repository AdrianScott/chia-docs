"use strict";(self.webpackChunkchia_docs=self.webpackChunkchia_docs||[]).push([[6706],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),d=r,m=c["".concat(l,".").concat(d)]||c[d]||h[d]||i;return t?a.createElement(m,o(o({ref:n},u),{},{components:t})):a.createElement(m,o({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const i={title:"Chia on Raspberry Pi",slug:"/chia-on-raspberry-pi"},o=void 0,s={unversionedId:"reference-client/raspberry-pi",id:"reference-client/raspberry-pi",title:"Chia on Raspberry Pi",description:"Try our GUI installer for Raspberry Pi OS 64 and Ubuntu 20.04 LTS or newer on ARM64.",source:"@site/docs/reference-client/raspberry-pi.mdx",sourceDirName:"reference-client",slug:"/chia-on-raspberry-pi",permalink:"/zh/chia-on-raspberry-pi",draft:!1,editUrl:"https://github.com/Chia-Network/chia-docs/blob/main/docs/reference-client/raspberry-pi.mdx",tags:[],version:"current",frontMatter:{title:"Chia on Raspberry Pi",slug:"/chia-on-raspberry-pi"},sidebar:"tutorialSidebar",previous:{title:"Password Protected Keys",permalink:"/zh/passphrases-protected-keys"},next:{title:"Headless Node",permalink:"/zh/headless-node"}},l={},p=[{value:"Headless",id:"headless",level:2},{value:"Installing and running the GUI on Ubuntu 20.04 or Raspbian 64 bit",id:"installing-and-running-the-gui-on-ubuntu-2004-or-raspbian-64-bit",level:2}],u={toc:p};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Try our ",(0,r.kt)("a",{parentName:"p",href:"https://download.chia.net/latest/ARM64-Ubuntu-gui"},"GUI installer")," for Raspberry Pi OS 64 and Ubuntu 20.04 LTS or newer on ARM64."),(0,r.kt)("p",null,"Tom's Hardware now has a ",(0,r.kt)("a",{parentName:"p",href:"https://www.tomshardware.com/how-to/raspberry-pi-chia-coin"},"nice piece on farming with the Pi"),"."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The Raspberry Pi 3 is not supported."),(0,r.kt)("p",{parentName:"admonition"},"It is highly recommended you put the Chia blockchain and wallet DB on an SSD (or NVMe) drive. Do not use the SD card for the blockchain or wallet DB location."),(0,r.kt)("p",{parentName:"admonition"},"We do not recommend running the Chia GUI on the Pi4 4GB model")),(0,r.kt)("p",null,"The following recipe was tested on a Pi 4 (4GiB RAM) running both Ubuntu Server 20.04 LTS 64 bit and Raspbian 64 bit. 64 bit OSes and python 3.7+ are required but helpfully Ubuntu 20.04 has python 3.8 out of the box and Raspbian ships with python 3.7. You can't just run a 64 bit kernel with a 32 bit OS install as you need 64 bit python 3.7+ also."),(0,r.kt)("p",null,"This was tested with ",(0,r.kt)("a",{parentName:"p",href:"https://www.raspberrypi.org/downloads/"},"Raspberry Pi Imager"),", using image ",(0,r.kt)("em",{parentName:"p"},"Ubuntu Server 20.04 LTS (Pi 3/4) 64 bit"),", and Raspbian 64 bit using the ",(0,r.kt)("em",{parentName:"p"},"2020-08-20-raspios-buster-arm64.zip")," image. We make available manylinux2014 ARM64 binary wheels for the main Chia dependencies which makes installing on Raspberry Pi pretty easy."),(0,r.kt)("p",null,"We recommend setting up swap in all cases on the 4GB Pi4 version"),(0,r.kt)("p",null,"For Ubuntu 20.04 LTS, 1024MiB is suggested:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo dd if=/dev/zero of=/swap bs=1M count=1024\nsudo chmod 600 /swap ; sudo mkswap /swap ; sudo swapon /swap\n")),(0,r.kt)("p",null,"Add this line to /etc/fstab so that swap available on reboot."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"/swap swap swap defaults 0 0\n")),(0,r.kt)("p",null,"For Raspbian 64:"),(0,r.kt)("p",null,"You need 1000/1024MiB of swap space. Here is an excellent ",(0,r.kt)("a",{parentName:"p",href:"https://pimylifeup.com/raspberry-pi-swap-file/"},"walk through of increasing swap space")," on Raspbian 64."),(0,r.kt)("p",null,"First some setup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Make sure you have a couple of requirements to compile items that aren't in binary form\nsudo apt-get install -y build-essential python3-dev\n\n# If you are not using Raspbian 64 (it pre-specifies it) add this\nexport PIP_EXTRA_INDEX_URL=https://www.piwheels.org/simple/\n\n# Make sure you have 64 bit Python 3\npython3 -c 'import platform; print(platform.architecture())'\n")),(0,r.kt)("p",null,"Then proceed with a relative usual install process:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/Chia-Network/chia-blockchain.git -b latest\ncd chia-blockchain\n\nsh install.sh\n. ./activate\nchia init\n\n# Optionally generate keys - can be done in the GUI later\nchia keys generate\n\n# Or you can import from 24 words\nchia keys add\n\n# and then enter your 24 words\n")),(0,r.kt)("p",null,"But you are getting an error related to not being able to find a blspy version that satisfies 0.3.1 you say or ",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR: Could not find a version that satisfies the requirement clvm-rs==0.1.3"),"? Frankly, with any install error message, you're probably trying to install on 32 bit Raspbian. You can check by running ",(0,r.kt)("inlineCode",{parentName:"p"},"uname -a")," and if it says arm7l you need a 64 bit version of your favorite OS. ",(0,r.kt)("inlineCode",{parentName:"p"},"uname -a")," should end with ",(0,r.kt)("inlineCode",{parentName:"p"},"aarch64 GNU/Linux"),"."),(0,r.kt)("p",null,"The Pi isn't cut out to be a Timelord and the Timelord requirements are very x86-64 specific currently and there is one piece of magic. You don't need this magic anymore now that chiavdf comes from a binary wheel on PyPi but we're leaving this here for people trying to build in other environments. This environment variable is set so that chiavdf doesn't attempt to compile Timelord components."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export BUILD_VDF_CLIENT=N\n")),(0,r.kt)("h2",{id:"headless"},"Headless"),(0,r.kt)("p",null,"You can run without the GUI using commands like ",(0,r.kt)("inlineCode",{parentName:"p"},"chia init"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"chia start farmer"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"watch 'chia show -s -c'"),". Be sure to check out ",(0,r.kt)("inlineCode",{parentName:"p"},"chia show -h")," if you do. It is also possible to ",(0,r.kt)("a",{parentName:"p",href:"/headless-node"},"remotely connect the UI to a headless node"),"."),(0,r.kt)("h2",{id:"installing-and-running-the-gui-on-ubuntu-2004-or-raspbian-64-bit"},"Installing and running the GUI on Ubuntu 20.04 or Raspbian 64 bit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"sh install-gui.sh\ncd chia-blockchain-gui\nnpm run electron &\n")))}c.isMDXComponent=!0}}]);